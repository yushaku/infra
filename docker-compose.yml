version: "3.3"

services:
  # nginx:
  #   image: nginx:1.20
  #   container_name: nginx
  #   restart: unless-stopped
  #   ports:
  #     - 80:80
  #     - 443:443
  #   volumes:
  #     - ./.docker/nginx/nginx_log:/var/log/nginx
  #     - ./config/nginx/default.conf:/etc/nginx/conf.d/default.conf
  #   networks:
  #     - common

  redis:
    image: redis:7.0-alpine
    container_name: redis
    ports:
      - ${REDIS_PORT:-6379}:6379
    networks:
      - common

  # redis-commander:
  #   image: rediscommander/redis-commander:latest
  #   container_name: redis-commander
  #   restart: unless-stopped
  #   environment:
  #     - REDIS_HOSTS=redis
  #   ports:
  #     - ${REDIS_COMMAND_PORT:-8081}:8081
  #   networks:
  #     - common

  redis-insight:
    container_name: redis-ui
    image: redis/redisinsight:2.52.0-amd64
    ports:
      - "5540:5540"
    environment:
      - REDIS_HOSTS=redis
    volumes:
      - .docker/redis-insight:/data
    networks:
      - common

  # dragonfly:
  #   container_name: dragonfly
  #   image: "docker.dragonflydb.io/dragonflydb/dragonfly"
  #   ulimits:
  #     memlock: -1
  #   ports:
  #     - "6379:6379"
  #   # For better performance, consider `host` mode instead `port` to avoid docker NAT.
  #   # `host` mode is NOT currently supported in Swarm Mode.
  #   # https://docs.docker.com/compose/compose-file/compose-file-v3/#network_mode
  #   # network_mode: "host"
  #   volumes:
  #     - .docker/dragonfly:/data
  #   networks:
  #     - common

  # minio:
  #   image: minio/minio:RELEASE.2022-10-08T20-11-00Z
  #   container_name: minio
  #   command: server /data --console-address ":9001"
  #   restart: unless-stopped
  #   ports:
  #     - ${MINIO_PORT_ADMIN}:9001
  #     - ${MINIO_PORT_API}:9000
  #   environment:
  #     MINIO_ROOT_USER: ${MINIO_SERVER_ACCESS_KEY:-minio}
  #     MINIO_ROOT_PASSWORD: ${MINIO_SERVER_SECRET_KEY:-miniopass}
  #   volumes:
  #     - ./.docker/minio:/data
  #   networks:
  #     - common

  # nats:
  #   image: nats:2.9-alpine
  #   container_name: nats
  #   restart: unless-stopped
  #   ports:
  #     - 8222:8222
  #     - 4222:4222
  #   networks:
  #     - common

  postgres:
    image: postgres:16.2
    container_name: postgres
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASS}
      POSTGRES_DB_MAIN: ${DB_MAIN}
      POSTGRES_DB_TEST: ${DB_TEST}
    ports:
      - ${DB_PORT}:5432
    volumes:
      - ./.docker/postgres/data:/var/lib/postgresql/data
      - ./config/init-db.sh:/docker-entrypoint-initdb.d/init.sql
    networks:
      - common

  # pgadmin:
  #   image: dpage/pgadmin4:8.5
  #   container_name: pgadmin
  #   environment:
  #     PGADMIN_DEFAULT_EMAIL: admin@gmail.com
  #     PGADMIN_DEFAULT_PASSWORD: admin
  #   ports:
  #     - 15432:80
  #   # volumes:
  #   #   - ./.docker/pgadmin:/var/lib/pgadmin
  #   networks:
  #     - common

  # zookeeper:
  #   container_name: zookeeper
  #   image: confluentinc/cp-zookeeper:latest
  #   environment:
  #     ZOOKEEPER_CLIENT_PORT: 2181
  #     ZOOKEEPER_TICK_TIME: 2000
  #   ports:
  #     - 22181:2181

  # kafka:
  #   container_name: kafka
  #   image: confluentinc/cp-kafka:latest
  #   depends_on:
  #     - zookeeper
  #   ports:
  #     - 29092:29092
  #   environment:
  #     KAFKA_BROKER_ID: 1
  #     KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
  #     KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092
  #     KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
  #     KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
  #     KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1

  # mongodb:
  #   container_name: mongo_db
  #   image: mongo:6.0.2-focal
  #   ports:
  #     - ${MONGO_PORT:-5433}:5433
  #   volumes:
  #     - .docker/mongodb:/data/db
  #   environment:
  #     - MONGO_NAME=$MONGO_NAME
  #   networks:
  #     - common

networks:
  common:
    driver: bridge
    name: common
